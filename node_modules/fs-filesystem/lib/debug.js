'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _functional = require('./functional');

var _functional2 = _interopRequireDefault(_functional);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tap = _functional2.default.tap;
var _F$R = _functional2.default.R,
    compose = _F$R.compose,
    composeP = _F$R.composeP,
    reduce = _F$R.reduce;
var apply = _ramda2.default.apply,
    prepend = _ramda2.default.prepend;


tap.log = function (f) {
  return function (x) {
    console.log(x);
    f(x);
    return x;
  };
};

// trace :: a -> a
var trace = tap(console.log.bind(console));

// trace :: a -> Promise a
var traceP = function traceP(x) {
  return _promise2.default.resolve(trace(x));
};

compose.log = compose(apply(compose), prepend(trace), reduce(function (acc, fn) {
  return acc.concat(fn, trace);
}, []), function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return [].concat(args);
});

// compose.log :: ((a -> Promise b), ... (y -> Promise z)) -> (z -> Promise a)
composeP.log = compose(apply(composeP), prepend(traceP), reduce(function (acc, fn) {
  return acc.concat(fn, traceP);
}, []), function () {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return [].concat(args);
});

_functional2.default.trace = trace;
_functional2.default.traceP = traceP;

exports.default = _functional2.default;