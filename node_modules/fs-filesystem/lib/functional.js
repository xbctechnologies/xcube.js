'use strict';

var _ramda = require('ramda');

// each :: (a -> *), [a]|Object -> undefined
var each = function each(f, x) {
  return x ? !Array.isArray(x) ? (0, _ramda.forEachObjIndexed)(f, x) : (0, _ramda.forEach)(f, x) : function (x) {
    return !Array.isArray(x) ? (0, _ramda.forEachObjIndexed)(f, x) : (0, _ramda.forEach)(f, x);
  };
};

// reductor :: ((a, b, x) -> a), a, x -> a
var reductor = function reductor(f, a, x) {
  if (Array.isArray(x)) {
    return x.reduce(f, a);
  } else {
    var acc = a;
    for (var k in x) {
      acc = f(acc, x[k], k, x);
    }
    return acc;
  }
};

// reduce :: ((a, b, x) -> a) -> a -> x -> a
// reduce :: ((a, b, x) -> a), a -> x -> a
// reduce :: ((a, b, x) -> a), a, x -> a
var reduce = function reduce(f, a, x) {
  return x ? reductor(f, a, x) : a ? function (x) {
    return reductor(f, a, x);
  } : function (a, x) {
    return x ? reductor(f, a, x) : function (x) {
      return reductor(f, a, x);
    };
  };
};

// filter :: Object -> Object
var filterObjIndexed = function filterObjIndexed(f, x) {
  return (0, _ramda.compose)((0, _ramda.reduce)(function (acc, k) {
    acc[k] = x[k];return acc;
  }, {}), (0, _ramda.filter)(function (k) {
    return f(x[k], k, x);
  }), _ramda.keys)(x);
};

// filter :: Object|[a] -> Object|[a]
var filter = function filter(f, x) {
  return x ? !Array.isArray(x) ? filterObjIndexed(f, x) : (0, _ramda.filter)(f, x) : function (x) {
    return !Array.isArray(x) ? filterObjIndexed(f, x) : (0, _ramda.filter)(f, x);
  };
};

// tautology :: * -> Bool
var tautology = function tautology() {
  return true;
};

// thrower :: string, Error|undefined -> undefined
var thrower = function thrower(msg) {
  var Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Error;
  throw new Type(msg);
};

module.exports = {
  each: each,
  filter: filter,
  tautology: tautology,
  thrower: thrower,
  R: {
    compose: _ramda.compose,
    composeP: _ramda.composeP,
    map: _ramda.map,
    mapAccum: _ramda.mapAccum,
    reduce: reduce,
    each: each,
    filter: filter
  }
};