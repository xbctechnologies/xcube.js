'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseWindows = exports.parseWindowsProps = exports.COMMAND = undefined;

var _functional = require('../functional');

var _functional2 = _interopRequireDefault(_functional);

var _utilities = require('../utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var filter = _functional2.default.filter;
var COMMAND = exports.COMMAND = 'wmic logicaldisk get ' + 'Caption,Description,DeviceID,DriveType,FileSystem,FreeSpace,Name,Size,VolumeName ' + '/format:csv';

var parseWindowsProps = exports.parseWindowsProps = function parseWindowsProps(acc, _ref) {
  var Caption = _ref.Caption,
      Description = _ref.Description,
      DeviceID = _ref.DeviceID,
      DriveType = _ref.DriveType,
      FileSystem = _ref.FileSystem,
      FreeSpace = _ref.FreeSpace,
      Name = _ref.Name,
      Size = _ref.Size,
      VolumeName = _ref.VolumeName;

  acc.devices[Name] = acc.devices[Name] ? acc.devices[Name] : (0, _utilities.emptyDevice)();
  acc.devices[Name].id = DeviceID;
  acc.devices[Name].whole = true;
  acc.devices[Name].parent = DeviceID;
  acc.devices[Name].node = Caption;
  acc.devices[Name].name = Name;
  acc.devices[Name].size = parseInt(Size) || 0;
  acc.devices[Name].description = Description;
  acc.devices[Name].removable = DriveType === '2';

  var volume = (0, _utilities.emptyVolume)();
  volume.id = DeviceID;
  volume.node = DeviceID;
  volume.name = VolumeName;
  volume.parent = DeviceID;
  volume.mounted = true;
  volume.mountPoint = Name;
  volume.fs = FileSystem;
  volume.space.total = parseInt(Size) || 0;
  volume.space.available = parseInt(FreeSpace) || 0;
  volume.space.used = volume.space.total - volume.space.available;
  acc.devices[Name].volumes = [volume];

  return acc;
};

var parseWindows = exports.parseWindows = function parseWindows(parseWindowsProps) {
  return function (userFilter) {
    return function (data) {
      // fix double \r\r coming from wmic
      data = data.replace(/\r\r/gi, '\r');
      var lines = data.split('\r\n').filter(function (s) {
        return s.trim();
      });

      var columns = lines[0].split(',');
      var result = [];
      for (var i = 1; i < lines.length; i++) {
        var values = lines[i].split(',');
        var obj = {};
        values.map(function (val, j) {
          obj[columns[j]] = val;
        });
        result.push(obj);
      }

      var _result$reduce = result.reduce(function (acc, v) {
        return parseWindowsProps(acc, v);
      }, { devices: {} }),
          devices = _result$reduce.devices;

      return {
        devices: filter(userFilter, devices) // apply user filter
      };
    };
  };
};