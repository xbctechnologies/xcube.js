'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ENVIRONMENT = exports.inferDevSize = exports.filesystemSync = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _functional = require('./functional');

var _functional2 = _interopRequireDefault(_functional);

var _utilities = require('./utilities');

var _linux = require('./linux');

var _linux2 = _interopRequireDefault(_linux);

var _macOS = require('./macOS');

var _macOS2 = _interopRequireDefault(_macOS);

var _windows = require('./windows');

var _windows2 = _interopRequireDefault(_windows);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tautology = _functional2.default.tautology,
    thrower = _functional2.default.thrower;
var _F$R = _functional2.default.R,
    compose = _F$R.compose,
    composeP = _F$R.composeP;

_child_process2.default.exec = _bluebird2.default.promisify(_child_process2.default.exec, { context: _child_process2.default });

// --------------------------------------
// Common Core - Validation
// --------------------------------------

var validateDev = function validateDev(dev) {
  if (typeof dev === 'function') {
    return dev;
  } else if (typeof dev === 'string') {
    return function (v, k) {
      return (0, _utilities.hasSubstr)(k, dev);
    };
  } else if (dev instanceof RegExp) {
    return function (v, k) {
      return dev.test(k);
    };
  } else if (typeof dev === 'undefined' || dev === null) {
    return tautology;
  }

  thrower('fs.filesystem expected first argument \'dev\' to be a function, string, regex or undefined/null. ' + ('Found ' + ((typeof dev === 'undefined' ? 'undefined' : (0, _typeof3.default)(dev)) === 'object' ? dev.constructor.name : typeof dev === 'undefined' ? 'undefined' : (0, _typeof3.default)(dev)) + ' instead.'), TypeError);
};

var validateCallback = function validateCallback(cb) {
  if (typeof cb !== 'function') {
    thrower('fs.filesystem expected second argument \'callback\' to be instanceof function. ' + ('Found ' + ((typeof cb === 'undefined' ? 'undefined' : (0, _typeof3.default)(cb)) === 'object' ? cb.constructor.name : typeof cb === 'undefined' ? 'undefined' : (0, _typeof3.default)(cb)) + ' instead.'), TypeError);
  }

  return cb;
};

var validate = function validate(validateDev, validateCallback) {
  return function (dev, callback) {
    if (typeof dev === 'function' && !callback) {
      return [tautology, dev];
    }

    return [validateDev(dev), validateCallback(callback)];
  };
};

// --------------------------------------
// Common Core - Main & Export Functions
// --------------------------------------

var ENVIRONMENT = {
  env: {
    LANG: 'en_US.UTF-8',
    PATH: process.env.PATH
  }
};

var execute = function execute(cmd, parser) {
  return function (filter, cb) {
    var sync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (sync) {
      return compose(parser(filter), _utilities.stringify, _child_process2.default.execSync)(cmd, ENVIRONMENT);
    }
    return composeP(function (v) {
      return cb(null, v);
    }, parser(filter), _utilities.stringify, _child_process2.default.exec)(cmd, ENVIRONMENT).catch(cb);
  };
};

var inferDevSize = function inferDevSize(result) {
  for (var k in result) {
    if (result[k].size === null) {
      var sizeSum = result[k].volumes.reduce(function (size, vol) {
        return size + vol.space.total;
      }, 0);
      result[k].size = sizeSum;
    }
  }
  return result;
};

var filesystem = function filesystem(macOS, linux, windows, validate, platform) {
  return function (dev, callback) {
    var devices = null;
    switch (platform) {
      case 'darwin':
        devices = macOS.apply(undefined, (0, _toConsumableArray3.default)(validate(dev, callback))).devices;
        break;
      case 'linux':
        devices = linux.apply(undefined, (0, _toConsumableArray3.default)(validate(dev, callback))).devices;
        break;
      case 'win32':
        devices = windows.apply(undefined, (0, _toConsumableArray3.default)(validate(dev, callback))).devices;
        break;
      default:
        thrower('fs.filesystem : Unsupported OS. fs.filesystem does not support ' + (platform + ' at the moment'));
    }
    return inferDevSize(devices);
  };
};

var filesystemSync = function filesystemSync(macOS, linux, windows, validateDev, platform) {
  return function (dev) {
    var devices = null;
    switch (platform) {
      case 'darwin':
        devices = macOS(validateDev(dev), null, true).devices;
        break;
      case 'linux':
        devices = linux(validateDev(dev), null, true).devices;
        break;
      case 'win32':
        devices = windows(validateDev(dev), null, true).devices;
        break;
      default:
        thrower('fs.filesystem : Unsupported OS. fs.filesystem does not support ' + (platform + ' at the moment'));
    }
    return inferDevSize(devices);
  };
};

var sync = filesystemSync(execute(_macOS2.default.COMMAND, _macOS2.default.parser), execute(_linux2.default.COMMAND, _linux2.default.parser), execute(_windows2.default.COMMAND, _windows2.default.parser), validateDev, _os2.default.platform());

exports.filesystemSync = sync;
exports.inferDevSize = inferDevSize;
exports.ENVIRONMENT = ENVIRONMENT;
exports.default = filesystem(execute(_macOS2.default.COMMAND, _macOS2.default.parser), execute(_linux2.default.COMMAND, _linux2.default.parser), execute(_windows2.default.COMMAND, _windows2.default.parser), validate(validateDev, validateCallback), _os2.default.platform());